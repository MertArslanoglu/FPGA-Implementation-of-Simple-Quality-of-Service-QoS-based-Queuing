// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/05/2022 00:04:06"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    proje
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module proje_vlg_sample_tst(
	bin0,
	bin1,
	clk,
	start,
	sampler_tx
);
input  bin0;
input  bin1;
input  clk;
input  start;
output sampler_tx;

reg sample;
time current_time;
always @(bin0 or bin1 or clk or start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module proje_vlg_check_tst (
	b,
	bf1,
	bf2,
	bf3,
	bf4,
	clk25,
	color,
	inside1,
	inside2,
	inside3,
	inside4,
	isitstart,
	o_hsync,
	o_vsync,
	readout,
	registeredbin,
	sampler_rx
);
input  b;
input [17:0] bf1;
input [17:0] bf2;
input [17:0] bf3;
input [17:0] bf4;
input  clk25;
input [7:0] color;
input [3:0] inside1;
input [3:0] inside2;
input [3:0] inside3;
input [3:0] inside4;
input [1:0] isitstart;
input  o_hsync;
input  o_vsync;
input [1:0] readout;
input [3:0] registeredbin;
input sampler_rx;

reg  b_expected;
reg [17:0] bf1_expected;
reg [17:0] bf2_expected;
reg [17:0] bf3_expected;
reg [17:0] bf4_expected;
reg  clk25_expected;
reg [7:0] color_expected;
reg [3:0] inside1_expected;
reg [3:0] inside2_expected;
reg [3:0] inside3_expected;
reg [3:0] inside4_expected;
reg [1:0] isitstart_expected;
reg  o_hsync_expected;
reg  o_vsync_expected;
reg [1:0] readout_expected;
reg [3:0] registeredbin_expected;

reg  b_prev;
reg [17:0] bf1_prev;
reg [17:0] bf2_prev;
reg [17:0] bf3_prev;
reg [17:0] bf4_prev;
reg  clk25_prev;
reg [7:0] color_prev;
reg [3:0] inside1_prev;
reg [3:0] inside2_prev;
reg [3:0] inside3_prev;
reg [3:0] inside4_prev;
reg [1:0] isitstart_prev;
reg  o_hsync_prev;
reg  o_vsync_prev;
reg [1:0] readout_prev;
reg [3:0] registeredbin_prev;

reg  b_expected_prev;
reg [17:0] bf1_expected_prev;
reg [17:0] bf2_expected_prev;
reg [17:0] bf3_expected_prev;
reg [17:0] bf4_expected_prev;
reg  clk25_expected_prev;
reg [7:0] color_expected_prev;
reg [3:0] inside1_expected_prev;
reg [3:0] inside2_expected_prev;
reg [3:0] inside3_expected_prev;
reg [3:0] inside4_expected_prev;
reg [1:0] isitstart_expected_prev;
reg  o_hsync_expected_prev;
reg  o_vsync_expected_prev;
reg [1:0] readout_expected_prev;
reg [3:0] registeredbin_expected_prev;

reg  last_b_exp;
reg [17:0] last_bf1_exp;
reg [17:0] last_bf2_exp;
reg [17:0] last_bf3_exp;
reg [17:0] last_bf4_exp;
reg  last_clk25_exp;
reg [7:0] last_color_exp;
reg [3:0] last_inside1_exp;
reg [3:0] last_inside2_exp;
reg [3:0] last_inside3_exp;
reg [3:0] last_inside4_exp;
reg [1:0] last_isitstart_exp;
reg  last_o_hsync_exp;
reg  last_o_vsync_exp;
reg [1:0] last_readout_exp;
reg [3:0] last_registeredbin_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	b_prev = b;
	bf1_prev = bf1;
	bf2_prev = bf2;
	bf3_prev = bf3;
	bf4_prev = bf4;
	clk25_prev = clk25;
	color_prev = color;
	inside1_prev = inside1;
	inside2_prev = inside2;
	inside3_prev = inside3;
	inside4_prev = inside4;
	isitstart_prev = isitstart;
	o_hsync_prev = o_hsync;
	o_vsync_prev = o_vsync;
	readout_prev = readout;
	registeredbin_prev = registeredbin;
end

// update expected /o prevs

always @(trigger)
begin
	b_expected_prev = b_expected;
	bf1_expected_prev = bf1_expected;
	bf2_expected_prev = bf2_expected;
	bf3_expected_prev = bf3_expected;
	bf4_expected_prev = bf4_expected;
	clk25_expected_prev = clk25_expected;
	color_expected_prev = color_expected;
	inside1_expected_prev = inside1_expected;
	inside2_expected_prev = inside2_expected;
	inside3_expected_prev = inside3_expected;
	inside4_expected_prev = inside4_expected;
	isitstart_expected_prev = isitstart_expected;
	o_hsync_expected_prev = o_hsync_expected;
	o_vsync_expected_prev = o_vsync_expected;
	readout_expected_prev = readout_expected;
	registeredbin_expected_prev = registeredbin_expected;
end



// expected b
initial
begin
	b_expected = 1'bX;
end 
// expected bf1[ 17 ]
initial
begin
	bf1_expected[17] = 1'bX;
end 
// expected bf1[ 16 ]
initial
begin
	bf1_expected[16] = 1'bX;
end 
// expected bf1[ 15 ]
initial
begin
	bf1_expected[15] = 1'bX;
end 
// expected bf1[ 14 ]
initial
begin
	bf1_expected[14] = 1'bX;
end 
// expected bf1[ 13 ]
initial
begin
	bf1_expected[13] = 1'bX;
end 
// expected bf1[ 12 ]
initial
begin
	bf1_expected[12] = 1'bX;
end 
// expected bf1[ 11 ]
initial
begin
	bf1_expected[11] = 1'bX;
end 
// expected bf1[ 10 ]
initial
begin
	bf1_expected[10] = 1'bX;
end 
// expected bf1[ 9 ]
initial
begin
	bf1_expected[9] = 1'bX;
end 
// expected bf1[ 8 ]
initial
begin
	bf1_expected[8] = 1'bX;
end 
// expected bf1[ 7 ]
initial
begin
	bf1_expected[7] = 1'bX;
end 
// expected bf1[ 6 ]
initial
begin
	bf1_expected[6] = 1'bX;
end 
// expected bf1[ 5 ]
initial
begin
	bf1_expected[5] = 1'bX;
end 
// expected bf1[ 4 ]
initial
begin
	bf1_expected[4] = 1'bX;
end 
// expected bf1[ 3 ]
initial
begin
	bf1_expected[3] = 1'bX;
end 
// expected bf1[ 2 ]
initial
begin
	bf1_expected[2] = 1'bX;
end 
// expected bf1[ 1 ]
initial
begin
	bf1_expected[1] = 1'bX;
end 
// expected bf1[ 0 ]
initial
begin
	bf1_expected[0] = 1'bX;
end 
// expected bf2[ 17 ]
initial
begin
	bf2_expected[17] = 1'bX;
end 
// expected bf2[ 16 ]
initial
begin
	bf2_expected[16] = 1'bX;
end 
// expected bf2[ 15 ]
initial
begin
	bf2_expected[15] = 1'bX;
end 
// expected bf2[ 14 ]
initial
begin
	bf2_expected[14] = 1'bX;
end 
// expected bf2[ 13 ]
initial
begin
	bf2_expected[13] = 1'bX;
end 
// expected bf2[ 12 ]
initial
begin
	bf2_expected[12] = 1'bX;
end 
// expected bf2[ 11 ]
initial
begin
	bf2_expected[11] = 1'bX;
end 
// expected bf2[ 10 ]
initial
begin
	bf2_expected[10] = 1'bX;
end 
// expected bf2[ 9 ]
initial
begin
	bf2_expected[9] = 1'bX;
end 
// expected bf2[ 8 ]
initial
begin
	bf2_expected[8] = 1'bX;
end 
// expected bf2[ 7 ]
initial
begin
	bf2_expected[7] = 1'bX;
end 
// expected bf2[ 6 ]
initial
begin
	bf2_expected[6] = 1'bX;
end 
// expected bf2[ 5 ]
initial
begin
	bf2_expected[5] = 1'bX;
end 
// expected bf2[ 4 ]
initial
begin
	bf2_expected[4] = 1'bX;
end 
// expected bf2[ 3 ]
initial
begin
	bf2_expected[3] = 1'bX;
end 
// expected bf2[ 2 ]
initial
begin
	bf2_expected[2] = 1'bX;
end 
// expected bf2[ 1 ]
initial
begin
	bf2_expected[1] = 1'bX;
end 
// expected bf2[ 0 ]
initial
begin
	bf2_expected[0] = 1'bX;
end 
// expected bf3[ 17 ]
initial
begin
	bf3_expected[17] = 1'bX;
end 
// expected bf3[ 16 ]
initial
begin
	bf3_expected[16] = 1'bX;
end 
// expected bf3[ 15 ]
initial
begin
	bf3_expected[15] = 1'bX;
end 
// expected bf3[ 14 ]
initial
begin
	bf3_expected[14] = 1'bX;
end 
// expected bf3[ 13 ]
initial
begin
	bf3_expected[13] = 1'bX;
end 
// expected bf3[ 12 ]
initial
begin
	bf3_expected[12] = 1'bX;
end 
// expected bf3[ 11 ]
initial
begin
	bf3_expected[11] = 1'bX;
end 
// expected bf3[ 10 ]
initial
begin
	bf3_expected[10] = 1'bX;
end 
// expected bf3[ 9 ]
initial
begin
	bf3_expected[9] = 1'bX;
end 
// expected bf3[ 8 ]
initial
begin
	bf3_expected[8] = 1'bX;
end 
// expected bf3[ 7 ]
initial
begin
	bf3_expected[7] = 1'bX;
end 
// expected bf3[ 6 ]
initial
begin
	bf3_expected[6] = 1'bX;
end 
// expected bf3[ 5 ]
initial
begin
	bf3_expected[5] = 1'bX;
end 
// expected bf3[ 4 ]
initial
begin
	bf3_expected[4] = 1'bX;
end 
// expected bf3[ 3 ]
initial
begin
	bf3_expected[3] = 1'bX;
end 
// expected bf3[ 2 ]
initial
begin
	bf3_expected[2] = 1'bX;
end 
// expected bf3[ 1 ]
initial
begin
	bf3_expected[1] = 1'bX;
end 
// expected bf3[ 0 ]
initial
begin
	bf3_expected[0] = 1'bX;
end 
// expected bf4[ 17 ]
initial
begin
	bf4_expected[17] = 1'bX;
end 
// expected bf4[ 16 ]
initial
begin
	bf4_expected[16] = 1'bX;
end 
// expected bf4[ 15 ]
initial
begin
	bf4_expected[15] = 1'bX;
end 
// expected bf4[ 14 ]
initial
begin
	bf4_expected[14] = 1'bX;
end 
// expected bf4[ 13 ]
initial
begin
	bf4_expected[13] = 1'bX;
end 
// expected bf4[ 12 ]
initial
begin
	bf4_expected[12] = 1'bX;
end 
// expected bf4[ 11 ]
initial
begin
	bf4_expected[11] = 1'bX;
end 
// expected bf4[ 10 ]
initial
begin
	bf4_expected[10] = 1'bX;
end 
// expected bf4[ 9 ]
initial
begin
	bf4_expected[9] = 1'bX;
end 
// expected bf4[ 8 ]
initial
begin
	bf4_expected[8] = 1'bX;
end 
// expected bf4[ 7 ]
initial
begin
	bf4_expected[7] = 1'bX;
end 
// expected bf4[ 6 ]
initial
begin
	bf4_expected[6] = 1'bX;
end 
// expected bf4[ 5 ]
initial
begin
	bf4_expected[5] = 1'bX;
end 
// expected bf4[ 4 ]
initial
begin
	bf4_expected[4] = 1'bX;
end 
// expected bf4[ 3 ]
initial
begin
	bf4_expected[3] = 1'bX;
end 
// expected bf4[ 2 ]
initial
begin
	bf4_expected[2] = 1'bX;
end 
// expected bf4[ 1 ]
initial
begin
	bf4_expected[1] = 1'bX;
end 
// expected bf4[ 0 ]
initial
begin
	bf4_expected[0] = 1'bX;
end 

// expected clk25
initial
begin
	clk25_expected = 1'bX;
end 
// expected color[ 7 ]
initial
begin
	color_expected[7] = 1'bX;
end 
// expected color[ 6 ]
initial
begin
	color_expected[6] = 1'bX;
end 
// expected color[ 5 ]
initial
begin
	color_expected[5] = 1'bX;
end 
// expected color[ 4 ]
initial
begin
	color_expected[4] = 1'bX;
end 
// expected color[ 3 ]
initial
begin
	color_expected[3] = 1'bX;
end 
// expected color[ 2 ]
initial
begin
	color_expected[2] = 1'bX;
end 
// expected color[ 1 ]
initial
begin
	color_expected[1] = 1'bX;
end 
// expected color[ 0 ]
initial
begin
	color_expected[0] = 1'bX;
end 
// expected inside1[ 3 ]
initial
begin
	inside1_expected[3] = 1'bX;
end 
// expected inside1[ 2 ]
initial
begin
	inside1_expected[2] = 1'bX;
end 
// expected inside1[ 1 ]
initial
begin
	inside1_expected[1] = 1'bX;
end 
// expected inside1[ 0 ]
initial
begin
	inside1_expected[0] = 1'bX;
end 
// expected inside2[ 3 ]
initial
begin
	inside2_expected[3] = 1'bX;
end 
// expected inside2[ 2 ]
initial
begin
	inside2_expected[2] = 1'bX;
end 
// expected inside2[ 1 ]
initial
begin
	inside2_expected[1] = 1'bX;
end 
// expected inside2[ 0 ]
initial
begin
	inside2_expected[0] = 1'bX;
end 
// expected inside3[ 3 ]
initial
begin
	inside3_expected[3] = 1'bX;
end 
// expected inside3[ 2 ]
initial
begin
	inside3_expected[2] = 1'bX;
end 
// expected inside3[ 1 ]
initial
begin
	inside3_expected[1] = 1'bX;
end 
// expected inside3[ 0 ]
initial
begin
	inside3_expected[0] = 1'bX;
end 
// expected inside4[ 3 ]
initial
begin
	inside4_expected[3] = 1'bX;
end 
// expected inside4[ 2 ]
initial
begin
	inside4_expected[2] = 1'bX;
end 
// expected inside4[ 1 ]
initial
begin
	inside4_expected[1] = 1'bX;
end 
// expected inside4[ 0 ]
initial
begin
	inside4_expected[0] = 1'bX;
end 
// expected isitstart[ 1 ]
initial
begin
	isitstart_expected[1] = 1'bX;
end 
// expected isitstart[ 0 ]
initial
begin
	isitstart_expected[0] = 1'bX;
end 

// expected o_hsync
initial
begin
	o_hsync_expected = 1'bX;
end 

// expected o_vsync
initial
begin
	o_vsync_expected = 1'bX;
end 
// expected readout[ 1 ]
initial
begin
	readout_expected[1] = 1'bX;
end 
// expected readout[ 0 ]
initial
begin
	readout_expected[0] = 1'bX;
end 
// expected registeredbin[ 3 ]
initial
begin
	registeredbin_expected[3] = 1'bX;
end 
// expected registeredbin[ 2 ]
initial
begin
	registeredbin_expected[2] = 1'bX;
end 
// expected registeredbin[ 1 ]
initial
begin
	registeredbin_expected[1] = 1'bX;
end 
// expected registeredbin[ 0 ]
initial
begin
	registeredbin_expected[0] = 1'bX;
end 
// generate trigger
always @(b_expected or b or bf1_expected or bf1 or bf2_expected or bf2 or bf3_expected or bf3 or bf4_expected or bf4 or clk25_expected or clk25 or color_expected or color or inside1_expected or inside1 or inside2_expected or inside2 or inside3_expected or inside3 or inside4_expected or inside4 or isitstart_expected or isitstart or o_hsync_expected or o_hsync or o_vsync_expected or o_vsync or readout_expected or readout or registeredbin_expected or registeredbin)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected b = %b | expected bf1 = %b | expected bf2 = %b | expected bf3 = %b | expected bf4 = %b | expected clk25 = %b | expected color = %b | expected inside1 = %b | expected inside2 = %b | expected inside3 = %b | expected inside4 = %b | expected isitstart = %b | expected o_hsync = %b | expected o_vsync = %b | expected readout = %b | expected registeredbin = %b | ",b_expected_prev,bf1_expected_prev,bf2_expected_prev,bf3_expected_prev,bf4_expected_prev,clk25_expected_prev,color_expected_prev,inside1_expected_prev,inside2_expected_prev,inside3_expected_prev,inside4_expected_prev,isitstart_expected_prev,o_hsync_expected_prev,o_vsync_expected_prev,readout_expected_prev,registeredbin_expected_prev);
	$display("| real b = %b | real bf1 = %b | real bf2 = %b | real bf3 = %b | real bf4 = %b | real clk25 = %b | real color = %b | real inside1 = %b | real inside2 = %b | real inside3 = %b | real inside4 = %b | real isitstart = %b | real o_hsync = %b | real o_vsync = %b | real readout = %b | real registeredbin = %b | ",b_prev,bf1_prev,bf2_prev,bf3_prev,bf4_prev,clk25_prev,color_prev,inside1_prev,inside2_prev,inside3_prev,inside4_prev,isitstart_prev,o_hsync_prev,o_vsync_prev,readout_prev,registeredbin_prev);
`endif
	if (
		( b_expected_prev !== 1'bx ) && ( b_prev !== b_expected_prev )
		&& ((b_expected_prev !== last_b_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_b_exp = b_expected_prev;
	end
	if (
		( bf1_expected_prev[0] !== 1'bx ) && ( bf1_prev[0] !== bf1_expected_prev[0] )
		&& ((bf1_expected_prev[0] !== last_bf1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf1_expected_prev);
		$display ("     Real value = %b", bf1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bf1_exp[0] = bf1_expected_prev[0];
	end
	if (
		( bf1_expected_prev[1] !== 1'bx ) && ( bf1_prev[1] !== bf1_expected_prev[1] )
		&& ((bf1_expected_prev[1] !== last_bf1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf1_expected_prev);
		$display ("     Real value = %b", bf1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bf1_exp[1] = bf1_expected_prev[1];
	end
	if (
		( bf1_expected_prev[2] !== 1'bx ) && ( bf1_prev[2] !== bf1_expected_prev[2] )
		&& ((bf1_expected_prev[2] !== last_bf1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf1_expected_prev);
		$display ("     Real value = %b", bf1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bf1_exp[2] = bf1_expected_prev[2];
	end
	if (
		( bf1_expected_prev[3] !== 1'bx ) && ( bf1_prev[3] !== bf1_expected_prev[3] )
		&& ((bf1_expected_prev[3] !== last_bf1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf1_expected_prev);
		$display ("     Real value = %b", bf1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bf1_exp[3] = bf1_expected_prev[3];
	end
	if (
		( bf1_expected_prev[4] !== 1'bx ) && ( bf1_prev[4] !== bf1_expected_prev[4] )
		&& ((bf1_expected_prev[4] !== last_bf1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf1_expected_prev);
		$display ("     Real value = %b", bf1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bf1_exp[4] = bf1_expected_prev[4];
	end
	if (
		( bf1_expected_prev[5] !== 1'bx ) && ( bf1_prev[5] !== bf1_expected_prev[5] )
		&& ((bf1_expected_prev[5] !== last_bf1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf1_expected_prev);
		$display ("     Real value = %b", bf1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bf1_exp[5] = bf1_expected_prev[5];
	end
	if (
		( bf1_expected_prev[6] !== 1'bx ) && ( bf1_prev[6] !== bf1_expected_prev[6] )
		&& ((bf1_expected_prev[6] !== last_bf1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf1_expected_prev);
		$display ("     Real value = %b", bf1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bf1_exp[6] = bf1_expected_prev[6];
	end
	if (
		( bf1_expected_prev[7] !== 1'bx ) && ( bf1_prev[7] !== bf1_expected_prev[7] )
		&& ((bf1_expected_prev[7] !== last_bf1_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf1_expected_prev);
		$display ("     Real value = %b", bf1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bf1_exp[7] = bf1_expected_prev[7];
	end
	if (
		( bf1_expected_prev[8] !== 1'bx ) && ( bf1_prev[8] !== bf1_expected_prev[8] )
		&& ((bf1_expected_prev[8] !== last_bf1_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf1_expected_prev);
		$display ("     Real value = %b", bf1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bf1_exp[8] = bf1_expected_prev[8];
	end
	if (
		( bf1_expected_prev[9] !== 1'bx ) && ( bf1_prev[9] !== bf1_expected_prev[9] )
		&& ((bf1_expected_prev[9] !== last_bf1_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf1_expected_prev);
		$display ("     Real value = %b", bf1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bf1_exp[9] = bf1_expected_prev[9];
	end
	if (
		( bf1_expected_prev[10] !== 1'bx ) && ( bf1_prev[10] !== bf1_expected_prev[10] )
		&& ((bf1_expected_prev[10] !== last_bf1_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf1_expected_prev);
		$display ("     Real value = %b", bf1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bf1_exp[10] = bf1_expected_prev[10];
	end
	if (
		( bf1_expected_prev[11] !== 1'bx ) && ( bf1_prev[11] !== bf1_expected_prev[11] )
		&& ((bf1_expected_prev[11] !== last_bf1_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf1_expected_prev);
		$display ("     Real value = %b", bf1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bf1_exp[11] = bf1_expected_prev[11];
	end
	if (
		( bf1_expected_prev[12] !== 1'bx ) && ( bf1_prev[12] !== bf1_expected_prev[12] )
		&& ((bf1_expected_prev[12] !== last_bf1_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf1_expected_prev);
		$display ("     Real value = %b", bf1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bf1_exp[12] = bf1_expected_prev[12];
	end
	if (
		( bf1_expected_prev[13] !== 1'bx ) && ( bf1_prev[13] !== bf1_expected_prev[13] )
		&& ((bf1_expected_prev[13] !== last_bf1_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf1_expected_prev);
		$display ("     Real value = %b", bf1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bf1_exp[13] = bf1_expected_prev[13];
	end
	if (
		( bf1_expected_prev[14] !== 1'bx ) && ( bf1_prev[14] !== bf1_expected_prev[14] )
		&& ((bf1_expected_prev[14] !== last_bf1_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf1_expected_prev);
		$display ("     Real value = %b", bf1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bf1_exp[14] = bf1_expected_prev[14];
	end
	if (
		( bf1_expected_prev[15] !== 1'bx ) && ( bf1_prev[15] !== bf1_expected_prev[15] )
		&& ((bf1_expected_prev[15] !== last_bf1_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf1_expected_prev);
		$display ("     Real value = %b", bf1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bf1_exp[15] = bf1_expected_prev[15];
	end
	if (
		( bf1_expected_prev[16] !== 1'bx ) && ( bf1_prev[16] !== bf1_expected_prev[16] )
		&& ((bf1_expected_prev[16] !== last_bf1_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf1_expected_prev);
		$display ("     Real value = %b", bf1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bf1_exp[16] = bf1_expected_prev[16];
	end
	if (
		( bf1_expected_prev[17] !== 1'bx ) && ( bf1_prev[17] !== bf1_expected_prev[17] )
		&& ((bf1_expected_prev[17] !== last_bf1_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf1_expected_prev);
		$display ("     Real value = %b", bf1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bf1_exp[17] = bf1_expected_prev[17];
	end
	if (
		( bf2_expected_prev[0] !== 1'bx ) && ( bf2_prev[0] !== bf2_expected_prev[0] )
		&& ((bf2_expected_prev[0] !== last_bf2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf2_expected_prev);
		$display ("     Real value = %b", bf2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bf2_exp[0] = bf2_expected_prev[0];
	end
	if (
		( bf2_expected_prev[1] !== 1'bx ) && ( bf2_prev[1] !== bf2_expected_prev[1] )
		&& ((bf2_expected_prev[1] !== last_bf2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf2_expected_prev);
		$display ("     Real value = %b", bf2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bf2_exp[1] = bf2_expected_prev[1];
	end
	if (
		( bf2_expected_prev[2] !== 1'bx ) && ( bf2_prev[2] !== bf2_expected_prev[2] )
		&& ((bf2_expected_prev[2] !== last_bf2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf2_expected_prev);
		$display ("     Real value = %b", bf2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bf2_exp[2] = bf2_expected_prev[2];
	end
	if (
		( bf2_expected_prev[3] !== 1'bx ) && ( bf2_prev[3] !== bf2_expected_prev[3] )
		&& ((bf2_expected_prev[3] !== last_bf2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf2_expected_prev);
		$display ("     Real value = %b", bf2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bf2_exp[3] = bf2_expected_prev[3];
	end
	if (
		( bf2_expected_prev[4] !== 1'bx ) && ( bf2_prev[4] !== bf2_expected_prev[4] )
		&& ((bf2_expected_prev[4] !== last_bf2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf2_expected_prev);
		$display ("     Real value = %b", bf2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bf2_exp[4] = bf2_expected_prev[4];
	end
	if (
		( bf2_expected_prev[5] !== 1'bx ) && ( bf2_prev[5] !== bf2_expected_prev[5] )
		&& ((bf2_expected_prev[5] !== last_bf2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf2_expected_prev);
		$display ("     Real value = %b", bf2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bf2_exp[5] = bf2_expected_prev[5];
	end
	if (
		( bf2_expected_prev[6] !== 1'bx ) && ( bf2_prev[6] !== bf2_expected_prev[6] )
		&& ((bf2_expected_prev[6] !== last_bf2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf2_expected_prev);
		$display ("     Real value = %b", bf2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bf2_exp[6] = bf2_expected_prev[6];
	end
	if (
		( bf2_expected_prev[7] !== 1'bx ) && ( bf2_prev[7] !== bf2_expected_prev[7] )
		&& ((bf2_expected_prev[7] !== last_bf2_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf2_expected_prev);
		$display ("     Real value = %b", bf2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bf2_exp[7] = bf2_expected_prev[7];
	end
	if (
		( bf2_expected_prev[8] !== 1'bx ) && ( bf2_prev[8] !== bf2_expected_prev[8] )
		&& ((bf2_expected_prev[8] !== last_bf2_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf2_expected_prev);
		$display ("     Real value = %b", bf2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bf2_exp[8] = bf2_expected_prev[8];
	end
	if (
		( bf2_expected_prev[9] !== 1'bx ) && ( bf2_prev[9] !== bf2_expected_prev[9] )
		&& ((bf2_expected_prev[9] !== last_bf2_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf2_expected_prev);
		$display ("     Real value = %b", bf2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bf2_exp[9] = bf2_expected_prev[9];
	end
	if (
		( bf2_expected_prev[10] !== 1'bx ) && ( bf2_prev[10] !== bf2_expected_prev[10] )
		&& ((bf2_expected_prev[10] !== last_bf2_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf2_expected_prev);
		$display ("     Real value = %b", bf2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bf2_exp[10] = bf2_expected_prev[10];
	end
	if (
		( bf2_expected_prev[11] !== 1'bx ) && ( bf2_prev[11] !== bf2_expected_prev[11] )
		&& ((bf2_expected_prev[11] !== last_bf2_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf2_expected_prev);
		$display ("     Real value = %b", bf2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bf2_exp[11] = bf2_expected_prev[11];
	end
	if (
		( bf2_expected_prev[12] !== 1'bx ) && ( bf2_prev[12] !== bf2_expected_prev[12] )
		&& ((bf2_expected_prev[12] !== last_bf2_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf2_expected_prev);
		$display ("     Real value = %b", bf2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bf2_exp[12] = bf2_expected_prev[12];
	end
	if (
		( bf2_expected_prev[13] !== 1'bx ) && ( bf2_prev[13] !== bf2_expected_prev[13] )
		&& ((bf2_expected_prev[13] !== last_bf2_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf2_expected_prev);
		$display ("     Real value = %b", bf2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bf2_exp[13] = bf2_expected_prev[13];
	end
	if (
		( bf2_expected_prev[14] !== 1'bx ) && ( bf2_prev[14] !== bf2_expected_prev[14] )
		&& ((bf2_expected_prev[14] !== last_bf2_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf2_expected_prev);
		$display ("     Real value = %b", bf2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bf2_exp[14] = bf2_expected_prev[14];
	end
	if (
		( bf2_expected_prev[15] !== 1'bx ) && ( bf2_prev[15] !== bf2_expected_prev[15] )
		&& ((bf2_expected_prev[15] !== last_bf2_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf2_expected_prev);
		$display ("     Real value = %b", bf2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bf2_exp[15] = bf2_expected_prev[15];
	end
	if (
		( bf2_expected_prev[16] !== 1'bx ) && ( bf2_prev[16] !== bf2_expected_prev[16] )
		&& ((bf2_expected_prev[16] !== last_bf2_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf2_expected_prev);
		$display ("     Real value = %b", bf2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bf2_exp[16] = bf2_expected_prev[16];
	end
	if (
		( bf2_expected_prev[17] !== 1'bx ) && ( bf2_prev[17] !== bf2_expected_prev[17] )
		&& ((bf2_expected_prev[17] !== last_bf2_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf2_expected_prev);
		$display ("     Real value = %b", bf2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bf2_exp[17] = bf2_expected_prev[17];
	end
	if (
		( bf3_expected_prev[0] !== 1'bx ) && ( bf3_prev[0] !== bf3_expected_prev[0] )
		&& ((bf3_expected_prev[0] !== last_bf3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf3_expected_prev);
		$display ("     Real value = %b", bf3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_bf3_exp[0] = bf3_expected_prev[0];
	end
	if (
		( bf3_expected_prev[1] !== 1'bx ) && ( bf3_prev[1] !== bf3_expected_prev[1] )
		&& ((bf3_expected_prev[1] !== last_bf3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf3_expected_prev);
		$display ("     Real value = %b", bf3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_bf3_exp[1] = bf3_expected_prev[1];
	end
	if (
		( bf3_expected_prev[2] !== 1'bx ) && ( bf3_prev[2] !== bf3_expected_prev[2] )
		&& ((bf3_expected_prev[2] !== last_bf3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf3_expected_prev);
		$display ("     Real value = %b", bf3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_bf3_exp[2] = bf3_expected_prev[2];
	end
	if (
		( bf3_expected_prev[3] !== 1'bx ) && ( bf3_prev[3] !== bf3_expected_prev[3] )
		&& ((bf3_expected_prev[3] !== last_bf3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf3_expected_prev);
		$display ("     Real value = %b", bf3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_bf3_exp[3] = bf3_expected_prev[3];
	end
	if (
		( bf3_expected_prev[4] !== 1'bx ) && ( bf3_prev[4] !== bf3_expected_prev[4] )
		&& ((bf3_expected_prev[4] !== last_bf3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf3_expected_prev);
		$display ("     Real value = %b", bf3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_bf3_exp[4] = bf3_expected_prev[4];
	end
	if (
		( bf3_expected_prev[5] !== 1'bx ) && ( bf3_prev[5] !== bf3_expected_prev[5] )
		&& ((bf3_expected_prev[5] !== last_bf3_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf3_expected_prev);
		$display ("     Real value = %b", bf3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_bf3_exp[5] = bf3_expected_prev[5];
	end
	if (
		( bf3_expected_prev[6] !== 1'bx ) && ( bf3_prev[6] !== bf3_expected_prev[6] )
		&& ((bf3_expected_prev[6] !== last_bf3_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf3_expected_prev);
		$display ("     Real value = %b", bf3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_bf3_exp[6] = bf3_expected_prev[6];
	end
	if (
		( bf3_expected_prev[7] !== 1'bx ) && ( bf3_prev[7] !== bf3_expected_prev[7] )
		&& ((bf3_expected_prev[7] !== last_bf3_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf3_expected_prev);
		$display ("     Real value = %b", bf3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_bf3_exp[7] = bf3_expected_prev[7];
	end
	if (
		( bf3_expected_prev[8] !== 1'bx ) && ( bf3_prev[8] !== bf3_expected_prev[8] )
		&& ((bf3_expected_prev[8] !== last_bf3_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf3[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf3_expected_prev);
		$display ("     Real value = %b", bf3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_bf3_exp[8] = bf3_expected_prev[8];
	end
	if (
		( bf3_expected_prev[9] !== 1'bx ) && ( bf3_prev[9] !== bf3_expected_prev[9] )
		&& ((bf3_expected_prev[9] !== last_bf3_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf3[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf3_expected_prev);
		$display ("     Real value = %b", bf3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_bf3_exp[9] = bf3_expected_prev[9];
	end
	if (
		( bf3_expected_prev[10] !== 1'bx ) && ( bf3_prev[10] !== bf3_expected_prev[10] )
		&& ((bf3_expected_prev[10] !== last_bf3_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf3[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf3_expected_prev);
		$display ("     Real value = %b", bf3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_bf3_exp[10] = bf3_expected_prev[10];
	end
	if (
		( bf3_expected_prev[11] !== 1'bx ) && ( bf3_prev[11] !== bf3_expected_prev[11] )
		&& ((bf3_expected_prev[11] !== last_bf3_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf3[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf3_expected_prev);
		$display ("     Real value = %b", bf3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_bf3_exp[11] = bf3_expected_prev[11];
	end
	if (
		( bf3_expected_prev[12] !== 1'bx ) && ( bf3_prev[12] !== bf3_expected_prev[12] )
		&& ((bf3_expected_prev[12] !== last_bf3_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf3[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf3_expected_prev);
		$display ("     Real value = %b", bf3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_bf3_exp[12] = bf3_expected_prev[12];
	end
	if (
		( bf3_expected_prev[13] !== 1'bx ) && ( bf3_prev[13] !== bf3_expected_prev[13] )
		&& ((bf3_expected_prev[13] !== last_bf3_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf3[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf3_expected_prev);
		$display ("     Real value = %b", bf3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_bf3_exp[13] = bf3_expected_prev[13];
	end
	if (
		( bf3_expected_prev[14] !== 1'bx ) && ( bf3_prev[14] !== bf3_expected_prev[14] )
		&& ((bf3_expected_prev[14] !== last_bf3_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf3[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf3_expected_prev);
		$display ("     Real value = %b", bf3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_bf3_exp[14] = bf3_expected_prev[14];
	end
	if (
		( bf3_expected_prev[15] !== 1'bx ) && ( bf3_prev[15] !== bf3_expected_prev[15] )
		&& ((bf3_expected_prev[15] !== last_bf3_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf3[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf3_expected_prev);
		$display ("     Real value = %b", bf3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_bf3_exp[15] = bf3_expected_prev[15];
	end
	if (
		( bf3_expected_prev[16] !== 1'bx ) && ( bf3_prev[16] !== bf3_expected_prev[16] )
		&& ((bf3_expected_prev[16] !== last_bf3_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf3[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf3_expected_prev);
		$display ("     Real value = %b", bf3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_bf3_exp[16] = bf3_expected_prev[16];
	end
	if (
		( bf3_expected_prev[17] !== 1'bx ) && ( bf3_prev[17] !== bf3_expected_prev[17] )
		&& ((bf3_expected_prev[17] !== last_bf3_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf3[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf3_expected_prev);
		$display ("     Real value = %b", bf3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_bf3_exp[17] = bf3_expected_prev[17];
	end
	if (
		( bf4_expected_prev[0] !== 1'bx ) && ( bf4_prev[0] !== bf4_expected_prev[0] )
		&& ((bf4_expected_prev[0] !== last_bf4_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf4_expected_prev);
		$display ("     Real value = %b", bf4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_bf4_exp[0] = bf4_expected_prev[0];
	end
	if (
		( bf4_expected_prev[1] !== 1'bx ) && ( bf4_prev[1] !== bf4_expected_prev[1] )
		&& ((bf4_expected_prev[1] !== last_bf4_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf4_expected_prev);
		$display ("     Real value = %b", bf4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_bf4_exp[1] = bf4_expected_prev[1];
	end
	if (
		( bf4_expected_prev[2] !== 1'bx ) && ( bf4_prev[2] !== bf4_expected_prev[2] )
		&& ((bf4_expected_prev[2] !== last_bf4_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf4_expected_prev);
		$display ("     Real value = %b", bf4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_bf4_exp[2] = bf4_expected_prev[2];
	end
	if (
		( bf4_expected_prev[3] !== 1'bx ) && ( bf4_prev[3] !== bf4_expected_prev[3] )
		&& ((bf4_expected_prev[3] !== last_bf4_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf4_expected_prev);
		$display ("     Real value = %b", bf4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_bf4_exp[3] = bf4_expected_prev[3];
	end
	if (
		( bf4_expected_prev[4] !== 1'bx ) && ( bf4_prev[4] !== bf4_expected_prev[4] )
		&& ((bf4_expected_prev[4] !== last_bf4_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf4_expected_prev);
		$display ("     Real value = %b", bf4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_bf4_exp[4] = bf4_expected_prev[4];
	end
	if (
		( bf4_expected_prev[5] !== 1'bx ) && ( bf4_prev[5] !== bf4_expected_prev[5] )
		&& ((bf4_expected_prev[5] !== last_bf4_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf4_expected_prev);
		$display ("     Real value = %b", bf4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_bf4_exp[5] = bf4_expected_prev[5];
	end
	if (
		( bf4_expected_prev[6] !== 1'bx ) && ( bf4_prev[6] !== bf4_expected_prev[6] )
		&& ((bf4_expected_prev[6] !== last_bf4_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf4_expected_prev);
		$display ("     Real value = %b", bf4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_bf4_exp[6] = bf4_expected_prev[6];
	end
	if (
		( bf4_expected_prev[7] !== 1'bx ) && ( bf4_prev[7] !== bf4_expected_prev[7] )
		&& ((bf4_expected_prev[7] !== last_bf4_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf4_expected_prev);
		$display ("     Real value = %b", bf4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_bf4_exp[7] = bf4_expected_prev[7];
	end
	if (
		( bf4_expected_prev[8] !== 1'bx ) && ( bf4_prev[8] !== bf4_expected_prev[8] )
		&& ((bf4_expected_prev[8] !== last_bf4_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf4[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf4_expected_prev);
		$display ("     Real value = %b", bf4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_bf4_exp[8] = bf4_expected_prev[8];
	end
	if (
		( bf4_expected_prev[9] !== 1'bx ) && ( bf4_prev[9] !== bf4_expected_prev[9] )
		&& ((bf4_expected_prev[9] !== last_bf4_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf4[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf4_expected_prev);
		$display ("     Real value = %b", bf4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_bf4_exp[9] = bf4_expected_prev[9];
	end
	if (
		( bf4_expected_prev[10] !== 1'bx ) && ( bf4_prev[10] !== bf4_expected_prev[10] )
		&& ((bf4_expected_prev[10] !== last_bf4_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf4[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf4_expected_prev);
		$display ("     Real value = %b", bf4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_bf4_exp[10] = bf4_expected_prev[10];
	end
	if (
		( bf4_expected_prev[11] !== 1'bx ) && ( bf4_prev[11] !== bf4_expected_prev[11] )
		&& ((bf4_expected_prev[11] !== last_bf4_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf4[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf4_expected_prev);
		$display ("     Real value = %b", bf4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_bf4_exp[11] = bf4_expected_prev[11];
	end
	if (
		( bf4_expected_prev[12] !== 1'bx ) && ( bf4_prev[12] !== bf4_expected_prev[12] )
		&& ((bf4_expected_prev[12] !== last_bf4_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf4[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf4_expected_prev);
		$display ("     Real value = %b", bf4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_bf4_exp[12] = bf4_expected_prev[12];
	end
	if (
		( bf4_expected_prev[13] !== 1'bx ) && ( bf4_prev[13] !== bf4_expected_prev[13] )
		&& ((bf4_expected_prev[13] !== last_bf4_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf4[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf4_expected_prev);
		$display ("     Real value = %b", bf4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_bf4_exp[13] = bf4_expected_prev[13];
	end
	if (
		( bf4_expected_prev[14] !== 1'bx ) && ( bf4_prev[14] !== bf4_expected_prev[14] )
		&& ((bf4_expected_prev[14] !== last_bf4_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf4[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf4_expected_prev);
		$display ("     Real value = %b", bf4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_bf4_exp[14] = bf4_expected_prev[14];
	end
	if (
		( bf4_expected_prev[15] !== 1'bx ) && ( bf4_prev[15] !== bf4_expected_prev[15] )
		&& ((bf4_expected_prev[15] !== last_bf4_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf4[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf4_expected_prev);
		$display ("     Real value = %b", bf4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_bf4_exp[15] = bf4_expected_prev[15];
	end
	if (
		( bf4_expected_prev[16] !== 1'bx ) && ( bf4_prev[16] !== bf4_expected_prev[16] )
		&& ((bf4_expected_prev[16] !== last_bf4_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf4[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf4_expected_prev);
		$display ("     Real value = %b", bf4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_bf4_exp[16] = bf4_expected_prev[16];
	end
	if (
		( bf4_expected_prev[17] !== 1'bx ) && ( bf4_prev[17] !== bf4_expected_prev[17] )
		&& ((bf4_expected_prev[17] !== last_bf4_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bf4[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bf4_expected_prev);
		$display ("     Real value = %b", bf4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_bf4_exp[17] = bf4_expected_prev[17];
	end
	if (
		( clk25_expected_prev !== 1'bx ) && ( clk25_prev !== clk25_expected_prev )
		&& ((clk25_expected_prev !== last_clk25_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk25 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk25_expected_prev);
		$display ("     Real value = %b", clk25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_clk25_exp = clk25_expected_prev;
	end
	if (
		( color_expected_prev[0] !== 1'bx ) && ( color_prev[0] !== color_expected_prev[0] )
		&& ((color_expected_prev[0] !== last_color_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port color[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", color_expected_prev);
		$display ("     Real value = %b", color_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_color_exp[0] = color_expected_prev[0];
	end
	if (
		( color_expected_prev[1] !== 1'bx ) && ( color_prev[1] !== color_expected_prev[1] )
		&& ((color_expected_prev[1] !== last_color_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port color[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", color_expected_prev);
		$display ("     Real value = %b", color_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_color_exp[1] = color_expected_prev[1];
	end
	if (
		( color_expected_prev[2] !== 1'bx ) && ( color_prev[2] !== color_expected_prev[2] )
		&& ((color_expected_prev[2] !== last_color_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port color[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", color_expected_prev);
		$display ("     Real value = %b", color_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_color_exp[2] = color_expected_prev[2];
	end
	if (
		( color_expected_prev[3] !== 1'bx ) && ( color_prev[3] !== color_expected_prev[3] )
		&& ((color_expected_prev[3] !== last_color_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port color[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", color_expected_prev);
		$display ("     Real value = %b", color_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_color_exp[3] = color_expected_prev[3];
	end
	if (
		( color_expected_prev[4] !== 1'bx ) && ( color_prev[4] !== color_expected_prev[4] )
		&& ((color_expected_prev[4] !== last_color_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port color[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", color_expected_prev);
		$display ("     Real value = %b", color_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_color_exp[4] = color_expected_prev[4];
	end
	if (
		( color_expected_prev[5] !== 1'bx ) && ( color_prev[5] !== color_expected_prev[5] )
		&& ((color_expected_prev[5] !== last_color_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port color[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", color_expected_prev);
		$display ("     Real value = %b", color_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_color_exp[5] = color_expected_prev[5];
	end
	if (
		( color_expected_prev[6] !== 1'bx ) && ( color_prev[6] !== color_expected_prev[6] )
		&& ((color_expected_prev[6] !== last_color_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port color[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", color_expected_prev);
		$display ("     Real value = %b", color_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_color_exp[6] = color_expected_prev[6];
	end
	if (
		( color_expected_prev[7] !== 1'bx ) && ( color_prev[7] !== color_expected_prev[7] )
		&& ((color_expected_prev[7] !== last_color_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port color[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", color_expected_prev);
		$display ("     Real value = %b", color_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_color_exp[7] = color_expected_prev[7];
	end
	if (
		( inside1_expected_prev[0] !== 1'bx ) && ( inside1_prev[0] !== inside1_expected_prev[0] )
		&& ((inside1_expected_prev[0] !== last_inside1_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inside1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inside1_expected_prev);
		$display ("     Real value = %b", inside1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inside1_exp[0] = inside1_expected_prev[0];
	end
	if (
		( inside1_expected_prev[1] !== 1'bx ) && ( inside1_prev[1] !== inside1_expected_prev[1] )
		&& ((inside1_expected_prev[1] !== last_inside1_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inside1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inside1_expected_prev);
		$display ("     Real value = %b", inside1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inside1_exp[1] = inside1_expected_prev[1];
	end
	if (
		( inside1_expected_prev[2] !== 1'bx ) && ( inside1_prev[2] !== inside1_expected_prev[2] )
		&& ((inside1_expected_prev[2] !== last_inside1_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inside1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inside1_expected_prev);
		$display ("     Real value = %b", inside1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inside1_exp[2] = inside1_expected_prev[2];
	end
	if (
		( inside1_expected_prev[3] !== 1'bx ) && ( inside1_prev[3] !== inside1_expected_prev[3] )
		&& ((inside1_expected_prev[3] !== last_inside1_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inside1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inside1_expected_prev);
		$display ("     Real value = %b", inside1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_inside1_exp[3] = inside1_expected_prev[3];
	end
	if (
		( inside2_expected_prev[0] !== 1'bx ) && ( inside2_prev[0] !== inside2_expected_prev[0] )
		&& ((inside2_expected_prev[0] !== last_inside2_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inside2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inside2_expected_prev);
		$display ("     Real value = %b", inside2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_inside2_exp[0] = inside2_expected_prev[0];
	end
	if (
		( inside2_expected_prev[1] !== 1'bx ) && ( inside2_prev[1] !== inside2_expected_prev[1] )
		&& ((inside2_expected_prev[1] !== last_inside2_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inside2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inside2_expected_prev);
		$display ("     Real value = %b", inside2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_inside2_exp[1] = inside2_expected_prev[1];
	end
	if (
		( inside2_expected_prev[2] !== 1'bx ) && ( inside2_prev[2] !== inside2_expected_prev[2] )
		&& ((inside2_expected_prev[2] !== last_inside2_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inside2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inside2_expected_prev);
		$display ("     Real value = %b", inside2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_inside2_exp[2] = inside2_expected_prev[2];
	end
	if (
		( inside2_expected_prev[3] !== 1'bx ) && ( inside2_prev[3] !== inside2_expected_prev[3] )
		&& ((inside2_expected_prev[3] !== last_inside2_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inside2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inside2_expected_prev);
		$display ("     Real value = %b", inside2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_inside2_exp[3] = inside2_expected_prev[3];
	end
	if (
		( inside3_expected_prev[0] !== 1'bx ) && ( inside3_prev[0] !== inside3_expected_prev[0] )
		&& ((inside3_expected_prev[0] !== last_inside3_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inside3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inside3_expected_prev);
		$display ("     Real value = %b", inside3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_inside3_exp[0] = inside3_expected_prev[0];
	end
	if (
		( inside3_expected_prev[1] !== 1'bx ) && ( inside3_prev[1] !== inside3_expected_prev[1] )
		&& ((inside3_expected_prev[1] !== last_inside3_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inside3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inside3_expected_prev);
		$display ("     Real value = %b", inside3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_inside3_exp[1] = inside3_expected_prev[1];
	end
	if (
		( inside3_expected_prev[2] !== 1'bx ) && ( inside3_prev[2] !== inside3_expected_prev[2] )
		&& ((inside3_expected_prev[2] !== last_inside3_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inside3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inside3_expected_prev);
		$display ("     Real value = %b", inside3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_inside3_exp[2] = inside3_expected_prev[2];
	end
	if (
		( inside3_expected_prev[3] !== 1'bx ) && ( inside3_prev[3] !== inside3_expected_prev[3] )
		&& ((inside3_expected_prev[3] !== last_inside3_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inside3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inside3_expected_prev);
		$display ("     Real value = %b", inside3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_inside3_exp[3] = inside3_expected_prev[3];
	end
	if (
		( inside4_expected_prev[0] !== 1'bx ) && ( inside4_prev[0] !== inside4_expected_prev[0] )
		&& ((inside4_expected_prev[0] !== last_inside4_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inside4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inside4_expected_prev);
		$display ("     Real value = %b", inside4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_inside4_exp[0] = inside4_expected_prev[0];
	end
	if (
		( inside4_expected_prev[1] !== 1'bx ) && ( inside4_prev[1] !== inside4_expected_prev[1] )
		&& ((inside4_expected_prev[1] !== last_inside4_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inside4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inside4_expected_prev);
		$display ("     Real value = %b", inside4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_inside4_exp[1] = inside4_expected_prev[1];
	end
	if (
		( inside4_expected_prev[2] !== 1'bx ) && ( inside4_prev[2] !== inside4_expected_prev[2] )
		&& ((inside4_expected_prev[2] !== last_inside4_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inside4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inside4_expected_prev);
		$display ("     Real value = %b", inside4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_inside4_exp[2] = inside4_expected_prev[2];
	end
	if (
		( inside4_expected_prev[3] !== 1'bx ) && ( inside4_prev[3] !== inside4_expected_prev[3] )
		&& ((inside4_expected_prev[3] !== last_inside4_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inside4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inside4_expected_prev);
		$display ("     Real value = %b", inside4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_inside4_exp[3] = inside4_expected_prev[3];
	end
	if (
		( isitstart_expected_prev[0] !== 1'bx ) && ( isitstart_prev[0] !== isitstart_expected_prev[0] )
		&& ((isitstart_expected_prev[0] !== last_isitstart_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port isitstart[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", isitstart_expected_prev);
		$display ("     Real value = %b", isitstart_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_isitstart_exp[0] = isitstart_expected_prev[0];
	end
	if (
		( isitstart_expected_prev[1] !== 1'bx ) && ( isitstart_prev[1] !== isitstart_expected_prev[1] )
		&& ((isitstart_expected_prev[1] !== last_isitstart_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port isitstart[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", isitstart_expected_prev);
		$display ("     Real value = %b", isitstart_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_isitstart_exp[1] = isitstart_expected_prev[1];
	end
	if (
		( o_hsync_expected_prev !== 1'bx ) && ( o_hsync_prev !== o_hsync_expected_prev )
		&& ((o_hsync_expected_prev !== last_o_hsync_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_hsync :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_hsync_expected_prev);
		$display ("     Real value = %b", o_hsync_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_o_hsync_exp = o_hsync_expected_prev;
	end
	if (
		( o_vsync_expected_prev !== 1'bx ) && ( o_vsync_prev !== o_vsync_expected_prev )
		&& ((o_vsync_expected_prev !== last_o_vsync_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_vsync :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_vsync_expected_prev);
		$display ("     Real value = %b", o_vsync_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_o_vsync_exp = o_vsync_expected_prev;
	end
	if (
		( readout_expected_prev[0] !== 1'bx ) && ( readout_prev[0] !== readout_expected_prev[0] )
		&& ((readout_expected_prev[0] !== last_readout_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readout_expected_prev);
		$display ("     Real value = %b", readout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_readout_exp[0] = readout_expected_prev[0];
	end
	if (
		( readout_expected_prev[1] !== 1'bx ) && ( readout_prev[1] !== readout_expected_prev[1] )
		&& ((readout_expected_prev[1] !== last_readout_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readout_expected_prev);
		$display ("     Real value = %b", readout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_readout_exp[1] = readout_expected_prev[1];
	end
	if (
		( registeredbin_expected_prev[0] !== 1'bx ) && ( registeredbin_prev[0] !== registeredbin_expected_prev[0] )
		&& ((registeredbin_expected_prev[0] !== last_registeredbin_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port registeredbin[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", registeredbin_expected_prev);
		$display ("     Real value = %b", registeredbin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_registeredbin_exp[0] = registeredbin_expected_prev[0];
	end
	if (
		( registeredbin_expected_prev[1] !== 1'bx ) && ( registeredbin_prev[1] !== registeredbin_expected_prev[1] )
		&& ((registeredbin_expected_prev[1] !== last_registeredbin_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port registeredbin[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", registeredbin_expected_prev);
		$display ("     Real value = %b", registeredbin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_registeredbin_exp[1] = registeredbin_expected_prev[1];
	end
	if (
		( registeredbin_expected_prev[2] !== 1'bx ) && ( registeredbin_prev[2] !== registeredbin_expected_prev[2] )
		&& ((registeredbin_expected_prev[2] !== last_registeredbin_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port registeredbin[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", registeredbin_expected_prev);
		$display ("     Real value = %b", registeredbin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_registeredbin_exp[2] = registeredbin_expected_prev[2];
	end
	if (
		( registeredbin_expected_prev[3] !== 1'bx ) && ( registeredbin_prev[3] !== registeredbin_expected_prev[3] )
		&& ((registeredbin_expected_prev[3] !== last_registeredbin_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port registeredbin[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", registeredbin_expected_prev);
		$display ("     Real value = %b", registeredbin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_registeredbin_exp[3] = registeredbin_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module proje_vlg_vec_tst();
// constants                                           
// general purpose registers
reg bin0;
reg bin1;
reg clk;
reg start;
// wires                                               
wire b;
wire [17:0] bf1;
wire [17:0] bf2;
wire [17:0] bf3;
wire [17:0] bf4;
wire clk25;
wire [7:0] color;
wire [3:0] inside1;
wire [3:0] inside2;
wire [3:0] inside3;
wire [3:0] inside4;
wire [1:0] isitstart;
wire o_hsync;
wire o_vsync;
wire [1:0] readout;
wire [3:0] registeredbin;

wire sampler;                             

// assign statements (if any)                          
proje i1 (
// port map - connection between master ports and signals/registers   
	.b(b),
	.bf1(bf1),
	.bf2(bf2),
	.bf3(bf3),
	.bf4(bf4),
	.bin0(bin0),
	.bin1(bin1),
	.clk(clk),
	.clk25(clk25),
	.color(color),
	.inside1(inside1),
	.inside2(inside2),
	.inside3(inside3),
	.inside4(inside4),
	.isitstart(isitstart),
	.o_hsync(o_hsync),
	.o_vsync(o_vsync),
	.readout(readout),
	.registeredbin(registeredbin),
	.start(start)
);

// start
initial
begin
	start = 1'b1;
	start = #70000 1'b0;
	start = #10000 1'b1;
	start = #180000 1'b0;
	start = #10000 1'b1;
	start = #140000 1'b0;
	start = #10000 1'b1;
	start = #160000 1'b0;
	start = #10000 1'b1;
	start = #100000 1'b0;
	start = #10000 1'b1;
	start = #110000 1'b0;
	start = #10000 1'b1;
end 

// bin0
initial
begin
	bin0 = 1'b1;
	bin0 = #120000 1'b0;
	bin0 = #10000 1'b1;
	bin0 = #200000 1'b0;
	bin0 = #10000 1'b1;
	bin0 = #130000 1'b0;
	bin0 = #10000 1'b1;
	bin0 = #140000 1'b0;
	bin0 = #10000 1'b1;
	bin0 = #100000 1'b0;
	bin0 = #10000 1'b1;
	bin0 = #120000 1'b0;
	bin0 = #10000 1'b1;
end 

// bin1
initial
begin
	bin1 = 1'b1;
	bin1 = #100000 1'b0;
	bin1 = #10000 1'b1;
	bin1 = #50000 1'b0;
	bin1 = #10000 1'b1;
	bin1 = #20000 1'b0;
	bin1 = #10000 1'b1;
	bin1 = #110000 1'b0;
	bin1 = #10000 1'b1;
	bin1 = #30000 1'b0;
	bin1 = #10000 1'b1;
	bin1 = #10000 1'b0;
	bin1 = #10000 1'b1;
	bin1 = #60000 1'b0;
	bin1 = #10000 1'b1;
	bin1 = #40000 1'b0;
	bin1 = #10000 1'b1;
	bin1 = #10000 1'b0;
	bin1 = #10000 1'b1;
	bin1 = #80000 1'b0;
	bin1 = #10000 1'b1;
	bin1 = #30000 1'b0;
	bin1 = #10000 1'b1;
	bin1 = #10000 1'b0;
	bin1 = #10000 1'b1;
	bin1 = #40000 1'b0;
	bin1 = #10000 1'b1;
	bin1 = #30000 1'b0;
	bin1 = #10000 1'b1;
	bin1 = #10000 1'b0;
	bin1 = #10000 1'b1;
	bin1 = #50000 1'b0;
	bin1 = #10000 1'b1;
	bin1 = #40000 1'b0;
	bin1 = #10000 1'b1;
	bin1 = #10000 1'b0;
	bin1 = #10000 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #1000 1'b1;
	#1000;
end 

proje_vlg_sample_tst tb_sample (
	.bin0(bin0),
	.bin1(bin1),
	.clk(clk),
	.start(start),
	.sampler_tx(sampler)
);

proje_vlg_check_tst tb_out(
	.b(b),
	.bf1(bf1),
	.bf2(bf2),
	.bf3(bf3),
	.bf4(bf4),
	.clk25(clk25),
	.color(color),
	.inside1(inside1),
	.inside2(inside2),
	.inside3(inside3),
	.inside4(inside4),
	.isitstart(isitstart),
	.o_hsync(o_hsync),
	.o_vsync(o_vsync),
	.readout(readout),
	.registeredbin(registeredbin),
	.sampler_rx(sampler)
);
endmodule

